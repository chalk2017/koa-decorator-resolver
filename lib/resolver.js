Object.defineProperty(exports,"__esModule",{value:!0}),exports.injectorBuilder=exports.restfulBinder=exports.routeBinder=exports.servInjector=exports.injectRemove=exports.injectBind=exports.Post=exports.Get=exports.ormConnectionCreate=exports.connectionCreate=exports.defineTables=void 0;const sequelize_1=require("sequelize");class defineTables{tablesStructure;relation;connConf;sequelize;sqlite;sqlite3;constructor(e,t,r){this.tablesStructure=e,this.relation=t,this.connConf=r?.connConf,this.sequelize=r?.sequelize,this.sqlite=r?.sqlite,this.sqlite3=r?.sqlite3}declareTables(r,e,a){const o=this,s={freezeTableName:!0,timestamps:!1};let n={};return e&&0<e.length?e.forEach(e=>{var t=o.tablesStructure[e]({s:r,o:s,t:e});n[e]=a?o.useTransaction(t,a):t}):Object.keys(o.tablesStructure).forEach(e=>{var t=o.tablesStructure[e]({s:r,o:s,t:e});n[e]=a?o.useTransaction(t,a):t}),o.relation(n),n}useTransaction(r,a){const o={create:async(e,t)=>r.create(e,{transaction:a,...t}),update:async(e,t)=>r.update(e,{transaction:a,...t}),destroy:async e=>r.destroy({transaction:a,...e}),bulkCreate:async(e,t)=>r.bulkCreate(e,{transaction:a,...t}),findAll:async e=>r.findAll({transaction:a,...e}),findOne:async e=>r.findOne({transaction:a,...e}),max:async(e,t)=>r.max(e,{transaction:a,...t}),min:async(e,t)=>r.min(e,{transaction:a,...t}),sum:async(e,t)=>r.sum(e,{transaction:a,...t})};return new Proxy(r,{get(e,t,r){return o[t]||Reflect.get(e,t,r)}})}Database(c){const u=this;return(i,e,{configurable:t,enumerable:r,value:l,writable:a})=>{return{configurable:t,enumerable:r,value:async(...e)=>{var r=c?.autoClose??!0,a=c?.useTransaction??!1;let o;if(c?.useOrm){const n=await(0,exports.ormConnectionCreate)(u.sequelize)(u.connConf);let t=null;a&&(t=await n.transaction());var s=u.declareTables(n,c.tables,t);i.db={sequelize:n,tables:s,transaction:t};try{o=await l.apply(i,e),a&&t.commit()}catch(e){throw a&&t.rollback(),e}r&&!a&&await n.close()}else{const t=await(0,exports.connectionCreate)(u.sqlite,u.sqlite3)();i.db=t,o=await l.apply(i,e),r&&await t.close()}return o},writable:a}}}Sqlite=this.Database}exports.defineTables=defineTables;const connectionCreate=(e,t)=>async()=>{try{var e=require("sqlite3");const t=require("sqlite");return await t.open({filename:require(require("path").resolve("db.sqlite.js")).path,driver:e.Database})}catch(e){}},ormConnectionCreate=(exports.connectionCreate=connectionCreate,e=>async t=>{try{let e=[{dialect:"sqlite",storage:require(require("path").resolve("db.sqlite.js")).path}];var r=loadConfig(t),a=(r&&(e=r),new sequelize_1.Sequelize(...e));return a}catch(e){}}),loadConfig=(exports.ormConnectionCreate=ormConnectionCreate,e=>{if(e)return"sqlite"===e.driver?[{dialect:"sqlite",storage:e.path}]:"mysql"===e.driver?[e.database,e.username,e.password,{host:e.host,port:e.port,dialect:"mysql"}]:"postgres"===e.driver?[e.database,e.username,e.password,{host:e.host,port:e.port,dialect:"postgres"}]:[];var t,e=require("dotenv").config()["parsed"];return"sqlite"!==e.DB_DRIVER?"mysql"===e.DB_DRIVER?[(t=require(require("path").resolve("db.mysql.js"))).database,t.username,t.password,{host:t.host,port:t.port,dialect:"mysql"}]:"postgres"===e.DB_DRIVER?[(t=require(require("path").resolve("db.postgres.js"))).database,t.username,t.password,{host:t.host,port:t.port,dialect:"postgres"}]:[]:[{dialect:"sqlite",storage:require(require("path").resolve("db.sqlite.js")).path}]}),Get=n=>{return(t,e,{configurable:r,enumerable:a,value:o,writable:s})=>{return t.$restful?t.$restful[e]={url:n,method:"get"}:t.$restful={[e]:{url:n,method:"get"}},{configurable:r,enumerable:a,value:async(...e)=>{return await o.apply(t,e)},writable:s}}},Post=(exports.Get=Get,n=>{return(t,e,{configurable:r,enumerable:a,value:o,writable:s})=>{return t.$restful?t.$restful[e]={url:n,method:"post"}:t.$restful={[e]:{url:n,method:"post"}},{configurable:r,enumerable:a,value:async(...e)=>{return await o.apply(t,e)},writable:s}}}),injectBind=(exports.Post=Post,(e,t,r)=>{e.$inject||(e.$inject={});for(const a in r)e.$inject[a]?e.$inject[a][t]=r[a]:e.$inject[a]={[t]:r[a]}}),injectRemove=(exports.injectBind=injectBind,(e,t,r)=>{e.$inject||(e.$inject={}),e.$inject[t]&&(r?delete e.$inject[t][r]:delete e.$inject[t])}),servInjector=(exports.injectRemove=injectRemove,(p,d,b)=>{let e="post";for(const t in b)if(b[t].method&&p?.$inject&&p?.$inject[t]&&p?.$inject[t][d]){e=b[t].method;break}return[e,async e=>{const t={};let r=null;for(const i in b)if(b[i].before){const l=b[i].before.plugin;var a;p?.$inject&&p?.$inject[i]&&p?.$inject[i][d]&&(a=await l(e,p?.$inject[i][d]?.option),t[i]=a,b[i].before.replaceProps&&(r=a))}t.data=e.request.body,null===r&&(r=t.data);var o,s=await p[d](r,t,e);let n=!1;for(const c in b)if(b[c].after){const u=b[c].after.plugin;p?.$inject&&p?.$inject[c]&&p?.$inject[c][d]&&(o=await u(s,e,p?.$inject[c][d]?.option),t[c]=o,n=!0,b[c].after.replaceProps&&(e.body=o))}n||(e.body=s)}]}),routeBinder=(exports.servInjector=servInjector,(e,t,r={})=>{const a={};for(var o in t){var s,n=t[o],i=Object.getOwnPropertyNames(n.prototype).filter(e=>"constructor"!==e&&"$inject"!==e&&"db"!==e.toLowerCase()),l=Reflect.construct(n,[]);for(s of i){var[u,c]=(0,exports.servInjector)(l,s,r);e[u](`/${o}/`+s,c),a[o+"_"+s]=c}}return a}),restfulBinder=(exports.routeBinder=routeBinder,(e,t)=>{const a={};for(var r in t){var r=t[r],o=Object.getOwnPropertyNames(r.prototype).filter(e=>"constructor"!==e&&"$restful"!==e);const n=Reflect.construct(r,[]);for(let r of o){const{url:i,method:l}=n.$restful[r];var s=async e=>{if("get"===l?.toLowerCase()){var t=e["params"],t=await n[r](t||{},e);e.body=t}else if("post"===l?.toLowerCase()){t=e.request.body,t=await n[r](t,e);e.body=t}else if("put"===l?.toLowerCase()){t=e.request.body,t=await n[r](t,e);e.body=t}else{if("delete"!==l?.toLowerCase())return n[r](e);t=e["params"],t=await n[r](t||{},e);e.body=t}};"get"===l?.toLowerCase()?e.get(i,s):"post"===l?.toLowerCase()?e.post(i,s):"put"===l?.toLowerCase()?e.put(i,s):"delete"===l?.toLowerCase()?e.delete(i,s):e[l](i,s),a[""+i]=s}}return a}),injectorBuilder=(exports.restfulBinder=restfulBinder,(i,e)=>{const l=e?.onCreate||(()=>""),c=e?.onBefore||((...e)=>e),u=e?.onAfter||(e=>e);return n=>{return(t,e,{configurable:r,enumerable:a,value:o,writable:s})=>{l(t,e);return(0,exports.injectBind)(t,e,{[i]:{option:n}}),{configurable:r,enumerable:a,value:async(...e)=>{e=await c(...e),e=await o.apply(t,e);return await u(e)},writable:s}}}});exports.injectorBuilder=injectorBuilder;
