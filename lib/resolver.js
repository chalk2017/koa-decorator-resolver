function servInjector(d,f,p){let e="post";for(const t in p)if(p[t].method&&d?.$inject&&d?.$inject[t]&&d?.$inject[t][f]){e=p[t].method;break}let b=null,y=null;for(const r in p)if(p[r].intercept&&d?.$inject&&d?.$inject[r]&&d?.$inject[r][f]){b=p[r].intercept,y=d?.$inject[r][f]?.option;break}return[e,async e=>{const t={};let r=null;for(const i in p)if(p[i].before&&d?.$inject&&d?.$inject[i]&&d?.$inject[i][f]){const c=p[i].before.plugin;var n=await c(e,d?.$inject[i][f]?.option);t[i]=n,p[i].before.replaceProps&&(r=n)}t.data=e.request.body,null===r&&(r=t.data);let o=null,a=(o=b?await b(d[f],[r,t,e],y):await d[f](r,t,e),!1);for(const l in p)if(p[l].after){const u=p[l].after.plugin;var s;d?.$inject&&d?.$inject[l]&&d?.$inject[l][f]&&(s=await u(o,e,d?.$inject[l][f]?.option),t[l]=s,a=!0,p[l].after.replaceProps&&(e.body=s))}a||(e.body=o)}]}Object.defineProperty(exports,"__esModule",{value:!0});const InUsingProperty=["constructor","$inject","db"];function routeBinder(e,t,r={}){const n={};for(var o in t){var a,s=t[o],i=Object.getOwnPropertyNames(s.prototype).filter(t=>InUsingProperty.every(e=>t.toLowerCase()!==e)),c=Reflect.construct(s,[]);for(a of i){var[u,l]=servInjector(c,a,r);e[u](`/${o}/`+a,l),n[o+"_"+a]=l}}return n}function restfulBinder(e,t){const n={};for(var r in t){var r=t[r],o=Object.getOwnPropertyNames(r.prototype).filter(e=>"constructor"!==e&&"$restful"!==e);const s=Reflect.construct(r,[]);for(let r of o){const{url:i,method:c}=s.$restful[r];var a=async e=>{if("get"===c?.toLowerCase()){var t=e["params"],t=await s[r](t||{},e);e.body=t}else if("post"===c?.toLowerCase()){t=e.request.body,t=await s[r](t,e);e.body=t}else if("put"===c?.toLowerCase()){t=e.request.body,t=await s[r](t,e);e.body=t}else{if("delete"!==c?.toLowerCase())return s[r](e);t=e["params"],t=await s[r](t||{},e);e.body=t}};"get"===c?.toLowerCase()?e.get(i,a):"post"===c?.toLowerCase()?e.post(i,a):"put"===c?.toLowerCase()?e.put(i,a):"delete"===c?.toLowerCase()?e.delete(i,a):e[c](i,a),n[""+i]=a}}return n}function injectorBuilder(i,e){const c=e?.onDecorate||(()=>""),l=e?.onBefore||((...e)=>e),u=e?.onAfter||(e=>e);return s=>{return(t,e,{configurable:r,enumerable:n,value:o,writable:a})=>{c(t,e,s);return injectBind(t,e,{[i]:{option:s}}),{configurable:r,enumerable:n,value:async(...e)=>{e=await l(...e),e=await o.apply(t,e);return await u(e)},writable:a}}}}const funcInjectorBuilder=injectorBuilder,classInjectorBuilder=(r,e)=>{const n=e?.onDecorate||((...e)=>e);return t=>{return e=>(n(e,t),injectBind(e,"$class",{[r]:{option:t}}),e)}},propsInjectorBuilder=(o,e)=>{const a=e?.onDecorate||((...e)=>e);return n=>{return(e,t,r)=>{a(e,t,r,n),injectBind(e,"$props",{[o]:{funcName:t,option:n}})}}};function injectBind$1(e,t,r){e.$inject||(e.$inject={});for(const n in r)e.$inject[n]?e.$inject[n][t]=r[n]:e.$inject[n]={[t]:r[n]}}function injectRemove(e,t,r){e.$inject||(e.$inject={}),e.$inject[t]&&(r?delete e.$inject[t][r]:delete e.$inject[t])}const Get=s=>{return(t,e,{configurable:r,enumerable:n,value:o,writable:a})=>{return t.$restful?t.$restful[e]={url:s,method:"get"}:t.$restful={[e]:{url:s,method:"get"}},{configurable:r,enumerable:n,value:async(...e)=>{return await o.apply(t,e)},writable:a}}},Post=s=>{return(t,e,{configurable:r,enumerable:n,value:o,writable:a})=>{return t.$restful?t.$restful[e]={url:s,method:"post"}:t.$restful={[e]:{url:s,method:"post"}},{configurable:r,enumerable:n,value:async(...e)=>{return await o.apply(t,e)},writable:a}}},loadConfig=e=>{const{env:t,transfor:r}=e||{};let n="db.config.js",o={};t&&(e=require("dotenv").config()["parsed"],o=e,n=`db.${o.DB_DRIVER}.js`);e=require(require("path").resolve(n));return r?r(e,o):e},standardTransfor=e=>{var t=e.driver,r=e.options;for(const n in r)if(n===t)return r[n];return[]};class defineDatabase{orm={onCallBefore:async()=>"",onCallAfter:async()=>"",onCallError:async()=>"",Connect:async()=>""};options={};constructor(e,t){this.options=t||{},this.orm=new e(t),Object.defineProperty(this.orm,"options",{get(){return this.options}})}async connect(...e){await this.orm?.connect(...e)}database(s){const i=this;return(r,n,{configurable:e,enumerable:t,value:o,writable:a})=>{return{configurable:e,enumerable:t,value:async(...e)=>{let t=void 0;try{await i.orm.onCallBefore.call(i.orm,r,n,s),t=await o.apply(r,e),await i.orm.onCallAfter.call(i.orm,r,n,s)}catch(e){throw await i.orm.onCallError.call(i.orm,r,n,s,e),e}return t},writable:a}}}}Object.defineProperty(exports,"__esModule",{value:!0}),exports.baseTransfor=exports.useTransaction=exports.injectTransaction=exports.OrmLoader=exports.DefaultOptions=exports.OrmSequelize=void 0;const sequelize_1=require("sequelize"),configurator_1=require("../database/configurator");class OrmSequelize{db}exports.OrmSequelize=OrmSequelize,exports.DefaultOptions={useBaseConfig:!0,useTransaction:!1,useAlwaysConnection:!1};class OrmLoader{db={sequelize:void 0,transaction:void 0,tables:void 0};options;async connect(...e){var t=this.options.useBaseConfig??exports.DefaultOptions.useBaseConfig;try{var r=(0,configurator_1.loadConfig)({env:!!t,transfor:t?exports.baseTransfor:configurator_1.standardTransfor})||[];e&&0<e.length?this.db.sequelize=new sequelize_1.Sequelize(...e):this.db.sequelize=new sequelize_1.Sequelize(...r)}catch(e){}}async onCallBefore(e,t,r){(this.options?.useAlwaysConnection??exports.DefaultOptions.useAlwaysConnection)||this.connect();var n=r?.useTransaction??exports.DefaultOptions.useTransaction;n&&(this.db.transaction=await this.db.sequelize.transaction()),this.db.tables=this.declareTables(this.db.sequelize,this.db.transaction,r.tables,r.relation),e.db=this.db}async onCallAfter(e,t,r){var n=this.options?.useAlwaysConnection??exports.DefaultOptions.useAlwaysConnection;if((r?.useTransaction??!1)&&await this.db.transaction.commit(),!n)try{await this.db.sequelize.close()}catch(e){}}async onCallError(e,t,r,n){var o=this.options?.useAlwaysConnection??exports.DefaultOptions.useAlwaysConnection;if((r?.useTransaction??!1)&&await this.db.transaction.rollback(),!o)try{await this.db.sequelize.close()}catch(e){}}declareTables(n,r,e,t){const o={freezeTableName:!0,timestamps:!1},a=r=>(e,t)=>n.define(r,e,{...o,...t||{}});let s={};if(e&&0<e.length)e.forEach(e=>{var t=this.options.tablesStructure[e](a(e),{s:n,t:e,o:o});s[e]=r?(0,exports.useTransaction)(t,r):t}),t&&t(s);else{for(const c in this.options.tablesStructure){var i=this.options.tablesStructure[c](a(c),{s:n,t:c,o:o});s[c]=r?(0,exports.useTransaction)(i,r):i}this.options?.relation&&this.options.relation(s)}return s}}exports.OrmLoader=OrmLoader;const injectTransaction=(r,n)=>{return{create:async(e,t)=>r.create(e,{transaction:n,...t}),update:async(e,t)=>r.update(e,{transaction:n,...t}),destroy:async e=>r.destroy({transaction:n,...e}),bulkCreate:async(e,t)=>r.bulkCreate(e,{transaction:n,...t}),findAll:async e=>r.findAll({transaction:n,...e}),findOne:async e=>r.findOne({transaction:n,...e}),max:async(e,t)=>r.max(e,{transaction:n,...t}),min:async(e,t)=>r.min(e,{transaction:n,...t}),sum:async(e,t)=>r.sum(e,{transaction:n,...t}),count:async e=>r.count({transaction:n,...e})}},useTransaction=(exports.injectTransaction=injectTransaction,(e,t)=>{const n=(0,exports.injectTransaction)(e,t);return new Proxy(e,{get(e,t,r){return n[t]||Reflect.get(e,t,r)}})}),baseTransfor=(exports.useTransaction=useTransaction,(e,t)=>{t=t.DB_DRIVER;return"sqlite"===t?[{dialect:"sqlite",storage:e.path}]:"mysql"===t?[e.database,e.username,e.password,{host:e.host,port:e.port,dialect:"mysql"}]:"postgres"===t?[e.database,e.username,e.password,{host:e.host,port:e.port,dialect:"postgres"}]:[]}),baseDefined_1=(exports.baseTransfor=baseTransfor,Object.defineProperty(exports,"__esModule",{value:!0}),exports.defineTables=void 0,require("../database/baseDefined")),sequelize_loader_1=require("./sequelize.loader");function defineTables(e,t,r={}){e=new baseDefined_1.defineDatabase(sequelize_loader_1.OrmLoader,{tablesStructure:e,relation:t,...r});return{connect:e.connect,Database:e.database}}exports.defineTables=defineTables;export{Get,Post,classInjectorBuilder,defineDatabase,funcInjectorBuilder,injectBind$1 as injectBind,injectRemove,injectorBuilder,loadConfig,propsInjectorBuilder,restfulBinder,routeBinder,servInjector,standardTransfor};
