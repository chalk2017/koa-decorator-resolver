Object.defineProperty(exports,"__esModule",{value:!0}),exports.propsInjectorBuilder=exports.classInjectorBuilder=exports.injectorBuilder=exports.restfulBinder=exports.routeBinder=exports.servInjector=exports.injectRemove=exports.injectBind=exports.Post=exports.Get=exports.ormConnectionCreate=exports.connectionCreate=exports.defineTables=void 0;const sequelize_1=require("sequelize");class defineTables{tablesStructure;relation;connConf;sequelize;sqlite;sqlite3;constructor(e,t,r){this.tablesStructure=e,this.relation=t||(()=>""),this.connConf=r?.connConf,this.sequelize=r?.sequelize,this.sqlite=r?.sqlite,this.sqlite3=r?.sqlite3}declareTables(r,e,o){const n=this,s={freezeTableName:!0,timestamps:!1};let a={};return e&&0<e.length?e.forEach(e=>{var t=n.tablesStructure[e]({s:r,o:s,t:e});a[e]=o?n.useTransaction(t,o):t}):Object.keys(n.tablesStructure).forEach(e=>{var t=n.tablesStructure[e]({s:r,o:s,t:e});a[e]=o?n.useTransaction(t,o):t}),n.relation(a),a}useTransaction(r,o){const n={create:async(e,t)=>r.create(e,{transaction:o,...t}),update:async(e,t)=>r.update(e,{transaction:o,...t}),destroy:async e=>r.destroy({transaction:o,...e}),bulkCreate:async(e,t)=>r.bulkCreate(e,{transaction:o,...t}),findAll:async e=>r.findAll({transaction:o,...e}),findOne:async e=>r.findOne({transaction:o,...e}),max:async(e,t)=>r.max(e,{transaction:o,...t}),min:async(e,t)=>r.min(e,{transaction:o,...t}),sum:async(e,t)=>r.sum(e,{transaction:o,...t})};return new Proxy(r,{get(e,t,r){return n[t]||Reflect.get(e,t,r)}})}Database(l){const u=this;return(i,e,{configurable:t,enumerable:r,value:c,writable:o})=>{return{configurable:t,enumerable:r,value:async(...e)=>{var r=l?.autoClose??!0,o=l?.useTransaction??!1;let n;if(l?.useOrm){const a=await(0,exports.ormConnectionCreate)(u.sequelize)(u.connConf);let t=null;o&&(t=await a.transaction());var s=u.declareTables(a,l.tables,t);i.db={sequelize:a,tables:s,transaction:t};try{n=await c.apply(i,e),o&&t.commit()}catch(e){throw o&&t.rollback(),e}r&&!o&&await a.close()}else{const t=await(0,exports.connectionCreate)(u.sqlite,u.sqlite3)();i.db=t,n=await c.apply(i,e),r&&await t.close()}return n},writable:o}}}Sqlite=this.Database}exports.defineTables=defineTables;const connectionCreate=(e,t)=>async()=>{try{var e=require("sqlite3");const t=require("sqlite");return await t.open({filename:require(require("path").resolve("db.sqlite.js")).path,driver:e.Database})}catch(e){}},ormConnectionCreate=(exports.connectionCreate=connectionCreate,e=>async t=>{try{let e=[{dialect:"sqlite",storage:require(require("path").resolve("db.sqlite.js")).path}];var r=loadConfig(t),o=(r&&(e=r),new sequelize_1.Sequelize(...e));return o}catch(e){}}),loadConfig=(exports.ormConnectionCreate=ormConnectionCreate,e=>{if(e)return"sqlite"===e.driver?[{dialect:"sqlite",storage:e.path}]:"mysql"===e.driver?[e.database,e.username,e.password,{host:e.host,port:e.port,dialect:"mysql"}]:"postgres"===e.driver?[e.database,e.username,e.password,{host:e.host,port:e.port,dialect:"postgres"}]:[];var t,e=require("dotenv").config()["parsed"];return"sqlite"!==e.DB_DRIVER?"mysql"===e.DB_DRIVER?[(t=require(require("path").resolve("db.mysql.js"))).database,t.username,t.password,{host:t.host,port:t.port,dialect:"mysql"}]:"postgres"===e.DB_DRIVER?[(t=require(require("path").resolve("db.postgres.js"))).database,t.username,t.password,{host:t.host,port:t.port,dialect:"postgres"}]:[]:[{dialect:"sqlite",storage:require(require("path").resolve("db.sqlite.js")).path}]}),Get=a=>{return(t,e,{configurable:r,enumerable:o,value:n,writable:s})=>{return t.$restful?t.$restful[e]={url:a,method:"get"}:t.$restful={[e]:{url:a,method:"get"}},{configurable:r,enumerable:o,value:async(...e)=>{return await n.apply(t,e)},writable:s}}},Post=(exports.Get=Get,a=>{return(t,e,{configurable:r,enumerable:o,value:n,writable:s})=>{return t.$restful?t.$restful[e]={url:a,method:"post"}:t.$restful={[e]:{url:a,method:"post"}},{configurable:r,enumerable:o,value:async(...e)=>{return await n.apply(t,e)},writable:s}}}),injectBind=(exports.Post=Post,(e,t,r)=>{e.$inject||(e.$inject={});for(const o in r)e.$inject[o]?e.$inject[o][t]=r[o]:e.$inject[o]={[t]:r[o]}}),injectRemove=(exports.injectBind=injectBind,(e,t,r)=>{e.$inject||(e.$inject={}),e.$inject[t]&&(r?delete e.$inject[t][r]:delete e.$inject[t])}),servInjector=(exports.injectRemove=injectRemove,(p,d,b)=>{let e="post";for(const t in b)if(b[t].method&&p?.$inject&&p?.$inject[t]&&p?.$inject[t][d]){e=b[t].method;break}let f=null,j=null;for(const r in b)if(b[r].intercept&&p?.$inject&&p?.$inject[r]&&p?.$inject[r][d]){f=b[r].intercept,j=p?.$inject[r][d]?.option;break}return[e,async e=>{const t={};let r=null;for(const i in b)if(b[i].before&&p?.$inject&&p?.$inject[i]&&p?.$inject[i][d]){const c=b[i].before.plugin;var o=await c(e,p?.$inject[i][d]?.option);t[i]=o,b[i].before.replaceProps&&(r=o)}t.data=e.request.body,null===r&&(r=t.data);let n=null,s=(n=f?await f(p[d],[r,t,e],j):await p[d](r,t,e),!1);for(const l in b)if(b[l].after){const u=b[l].after.plugin;var a;p?.$inject&&p?.$inject[l]&&p?.$inject[l][d]&&(a=await u(n,e,p?.$inject[l][d]?.option),t[l]=a,s=!0,b[l].after.replaceProps&&(e.body=a))}s||(e.body=n)}]}),routeBinder=(exports.servInjector=servInjector,(e,t,r={})=>{const o={};for(var n in t){var s,a=t[n],i=Object.getOwnPropertyNames(a.prototype).filter(e=>"constructor"!==e&&"$inject"!==e&&"db"!==e.toLowerCase()),c=Reflect.construct(a,[]);for(s of i){var[u,l]=(0,exports.servInjector)(c,s,r);e[u](`/${n}/`+s,l),o[n+"_"+s]=l}}return o}),restfulBinder=(exports.routeBinder=routeBinder,(e,t)=>{const o={};for(var r in t){var r=t[r],n=Object.getOwnPropertyNames(r.prototype).filter(e=>"constructor"!==e&&"$restful"!==e);const a=Reflect.construct(r,[]);for(let r of n){const{url:i,method:c}=a.$restful[r];var s=async e=>{if("get"===c?.toLowerCase()){var t=e["params"],t=await a[r](t||{},e);e.body=t}else if("post"===c?.toLowerCase()){t=e.request.body,t=await a[r](t,e);e.body=t}else if("put"===c?.toLowerCase()){t=e.request.body,t=await a[r](t,e);e.body=t}else{if("delete"!==c?.toLowerCase())return a[r](e);t=e["params"],t=await a[r](t||{},e);e.body=t}};"get"===c?.toLowerCase()?e.get(i,s):"post"===c?.toLowerCase()?e.post(i,s):"put"===c?.toLowerCase()?e.put(i,s):"delete"===c?.toLowerCase()?e.delete(i,s):e[c](i,s),o[""+i]=s}}return o}),injectorBuilder=(exports.restfulBinder=restfulBinder,(i,e)=>{const c=e?.onCreate||(()=>""),l=e?.onBefore||((...e)=>e),u=e?.onAfter||(e=>e);return a=>{return(t,e,{configurable:r,enumerable:o,value:n,writable:s})=>{c(t,e,a);return(0,exports.injectBind)(t,e,{[i]:{option:a}}),{configurable:r,enumerable:o,value:async(...e)=>{e=await l(...e),e=await n.apply(t,e);return await u(e)},writable:s}}}}),classInjectorBuilder=(exports.injectorBuilder=injectorBuilder,(r,o)=>{return t=>{return e=>(o?.onDecorate&&o.onDecorate(e,t),(0,exports.injectBind)(e,"$class",{[r]:{option:t}}),e)}}),propsInjectorBuilder=(exports.classInjectorBuilder=classInjectorBuilder,(e,t)=>{t?.onInject;return e=>{}});exports.propsInjectorBuilder=propsInjectorBuilder;
