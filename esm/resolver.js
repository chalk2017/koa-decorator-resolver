import require$$0 from"dotenv";import require$$1 from"path";import require$$0$1 from"sequelize";var commonjsGlobal="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function getDefaultExportFromCjs(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var lib={},type={},binder=(Object.defineProperty(type,"__esModule",{value:!0}),{}),injector={};function servInjector(d,f,b){let e="post";for(const t in b)if(b[t].method&&d?.$inject&&d?.$inject[t]&&d?.$inject[t][f]){e=b[t].method;break}let p=null,y=null;for(const n in b)if(b[n].intercept&&d?.$inject&&d?.$inject[n]&&d?.$inject[n][f]){p=b[n].intercept,y=d?.$inject[n][f]?.option;break}return[e,async e=>{const t={};let n=null;for(const s in b)if(b[s].before&&d?.$inject&&d?.$inject[s]&&d?.$inject[s][f]){const c=b[s].before.plugin;var o=await c(e,d?.$inject[s][f]?.option);t[s]=o,b[s].before.replaceProps&&(n=o)}t.data=e.request.body,null===n&&(n=t.data);let r=null,i=(r=p?await p(d[f],[n,t,e],y):await d[f](n,t,e),!1);for(const l in b)if(b[l].after){const u=b[l].after.plugin;var a;d?.$inject&&d?.$inject[l]&&d?.$inject[l][f]&&(a=await u(r,e,d?.$inject[l][f]?.option),t[l]=a,i=!0,b[l].after.replaceProps&&(e.body=a))}i||(e.body=r)},null]}Object.defineProperty(injector,"__esModule",{value:!0}),injector.servInjector=void 0,injector.servInjector=servInjector,Object.defineProperty(binder,"__esModule",{value:!0}),binder.restfulBinder=binder.routeBinder=void 0;const injector_1=injector,InUsingProperty=["constructor","$inject","db"];function routeBinder(e,t,n,o){var r,i=o?.onBeforeBind||(async()=>null),o=o?.onAfterBind||(async()=>null),a=async e=>e();const s={};for(r in a(i).then(()=>{}).catch(e=>console.error(e)),t){var c,l=t[r],u=Object.getOwnPropertyNames(l.prototype).filter(t=>InUsingProperty.every(e=>t.toLowerCase()!==e)),d=Reflect.construct(l,[]);for(c of u){var[f,b,p]=(0,injector_1.servInjector)(d,c,n);p?e[f](p,b):e[f](`/${r}/`+c,b),s[r+"_"+c]=b}}return a(o).then(()=>{}).catch(e=>console.error(e)),s}function restfulBinder(e,t){const o={};for(var n in t){var n=t[n],r=Object.getOwnPropertyNames(n.prototype).filter(e=>"constructor"!==e&&"$restful"!==e);const a=Reflect.construct(n,[]);for(let n of r){const{url:s,method:c}=a.$restful[n];var i=async e=>{if("get"===c?.toLowerCase()){var t=e["params"],t=await a[n](t||{},e);e.body=t}else if("post"===c?.toLowerCase()){t=e.request.body,t=await a[n](t,e);e.body=t}else if("put"===c?.toLowerCase()){t=e.request.body,t=await a[n](t,e);e.body=t}else{if("delete"!==c?.toLowerCase())return a[n](e);t=e["params"],t=await a[n](t||{},e);e.body=t}};"get"===c?.toLowerCase()?e.get(s,i):"post"===c?.toLowerCase()?e.post(s,i):"put"===c?.toLowerCase()?e.put(s,i):"delete"===c?.toLowerCase()?e.delete(s,i):e[c](s,i),o[""+s]=i}}return o}binder.routeBinder=routeBinder,binder.restfulBinder=restfulBinder;var builder={},factory={};function injectBind(e,t,n){e.$inject||(e.$inject={});for(const o in n)e.$inject[o]?e.$inject[o][t]=n[o]:e.$inject[o]={[t]:n[o]}}function injectRemove(e,t,n){e.$inject||(e.$inject={}),e.$inject[t]&&(n?delete e.$inject[t][n]:delete e.$inject[t])}Object.defineProperty(factory,"__esModule",{value:!0}),factory.injectRemove=factory.injectBind=void 0,factory.injectBind=injectBind,factory.injectRemove=injectRemove,Object.defineProperty(builder,"__esModule",{value:!0}),builder.propsInjectorBuilder=builder.classInjectorBuilder=builder.funcInjectorBuilder=builder.injectorBuilder=void 0;const factory_1=factory;function injectorBuilder(s,e){const c=e?.onDecorate||(()=>""),l=e?.onBefore||((...e)=>e),u=e?.onAfter||(e=>e);return a=>(t,e,{configurable:n,enumerable:o,value:r,writable:i})=>{c(t,e,a);return(0,factory_1.injectBind)(t,e,{[s]:{option:a}}),{configurable:n,enumerable:o,value:async(...e)=>{e=await l(...e),e=await r.apply(t,e);return await u(e)},writable:i}}}function classInjectorBuilder(n,e){const o=e?.onDecorate||((...e)=>e);return t=>{return e=>(o(e,t),(0,factory_1.injectBind)(e,"$class",{[n]:{option:t}}),e)}}function propsInjectorBuilder(r,e){const i=e?.onDecorate||((...e)=>e);return o=>{return(e,t,n)=>{i(e,t,n,o),(0,factory_1.injectBind)(e,"$props",{[r]:{funcName:t,option:o}})}}}builder.injectorBuilder=injectorBuilder,builder.funcInjectorBuilder=injectorBuilder,builder.classInjectorBuilder=classInjectorBuilder,builder.propsInjectorBuilder=propsInjectorBuilder;var restful={};function Get(a){return(t,e,{configurable:n,enumerable:o,value:r,writable:i})=>{return t.$restful?t.$restful[e]={url:a,method:"get"}:t.$restful={[e]:{url:a,method:"get"}},{configurable:n,enumerable:o,value:async(...e)=>{return await r.apply(t,e)},writable:i}}}function Post(a){return(t,e,{configurable:n,enumerable:o,value:r,writable:i})=>{return t.$restful?t.$restful[e]={url:a,method:"post"}:t.$restful={[e]:{url:a,method:"post"}},{configurable:n,enumerable:o,value:async(...e)=>{return await r.apply(t,e)},writable:i}}}Object.defineProperty(restful,"__esModule",{value:!0}),restful.Post=restful.Get=void 0,restful.Get=Get,restful.Post=Post;var configurator={};function loadConfig(e){const{env:t,transfor:n}=e||{};let o="db.config.js",r={};t&&(e=require$$0.config()["parsed"],r=e,o=`db.${r.DB_DRIVER}.js`);e=require(require$$1.resolve(o));return n?n(e,r):e}function standardTransfor(e){var t=e.driver,n=e.options;for(const o in n)if(o===t)return n[o];return[]}Object.defineProperty(configurator,"__esModule",{value:!0}),configurator.standardTransfor=configurator.loadConfig=void 0,configurator.loadConfig=loadConfig,configurator.standardTransfor=standardTransfor;var baseDefined={};Object.defineProperty(baseDefined,"__esModule",{value:!0}),baseDefined.DefineDatabase=void 0;class DefineDatabase{orm={onCallBefore:async()=>"",onCallAfter:async()=>"",onCallError:async()=>"",connect:async()=>""};options={};constructor(e,t){const n=this;this.options=t||{},this.orm=new e(t),Object.defineProperty(this.orm,"options",{get(){return n.options}}),this.database=this.database.bind(this)}async connect(...e){await this.orm?.connect(...e)}database(s){const c=this;return(r,i,{configurable:e,enumerable:t,value:a,writable:n})=>{return{configurable:e,enumerable:t,value:async(...e)=>{let t=void 0,n=void 0,o=void 0;try{n=await c.orm.onCallBefore.call(c.orm,r,i,s),t=await a.apply(r,e),o=await c.orm.onCallAfter.call(c.orm,r,i,s,n)}catch(e){throw await c.orm.onCallError.call(c.orm,r,i,s,n,o,e),e}return t},writable:n}}}}baseDefined.DefineDatabase=DefineDatabase;var sequelize_loader={},sequelize_binder=(!function(l){Object.defineProperty(l,"__esModule",{value:!0}),l.baseTransfor=l.useDefaultModel=l.useTransaction=l.injectTransaction=l.modelPropsInject=l.OrmLoader=l.DefaultOptions=l.OrmSequelize=void 0;const r=require$$0$1,i=configurator;l.OrmSequelize=class{db},l.DefaultOptions={useBaseConfig:!0,useTransaction:!1,useAlwaysConnection:!1,useMultiConnection:!1,connectionKey:"global-connection"};function n(n,o={}){return{create:async(e,t)=>n.create(e,{...o,...t}),update:async(e,t)=>n.update(e,{...o,...t}),destroy:async e=>n.destroy({...o,...e}),bulkCreate:async(e,t)=>n.bulkCreate(e,{...o,...t}),findAll:async e=>n.findAll({...o,...e}),findOne:async e=>n.findOne({...o,...e}),max:async(e,t)=>n.max(e,{...o,...t}),min:async(e,t)=>n.min(e,{...o,...t}),sum:async(e,t)=>n.sum(e,{...o,...t}),count:async e=>n.count({...o,...e})}}function a(e,t){return n(e,{transaction:t})}function u(e,t){const o=a(e,t);return new Proxy(e,{get(e,t,n){return o[t]||Reflect.get(e,t,n)}})}function d(e){const o=n(e);return new Proxy(e,{get(e,t,n){return o[t]||Reflect.get(e,t,n)}})}l.OrmLoader=class{connectionPool={};distroyConnect(e){(this.options?.useAlwaysConnection??l.DefaultOptions.useAlwaysConnection)||delete this.connectionPool[e]}options;async connect(e){var t=this.options.useBaseConfig??l.DefaultOptions.useBaseConfig,n=e?.key||l.DefaultOptions.connectionKey;this.connectionPool[n]={};try{var o=this.options?.sequelizeArgs||(0,i.loadConfig)({env:!!t,transfor:t?l.baseTransfor:i.standardTransfor})||[];e?.args&&0<e?.args.length?this.connectionPool[n].sequelize=new r.Sequelize(...e?.args):this.connectionPool[n].sequelize=new r.Sequelize(...o)}catch(e){throw this.distroyConnect(n),e}}async onCallBefore(e,t,n){const o=this;let r=l.DefaultOptions.connectionKey,i=null;var a=this.options?.useMultiConnection??l.DefaultOptions.useMultiConnection,s=this.options?.useAlwaysConnection??l.DefaultOptions.useAlwaysConnection;s||(a&&(r=Symbol(t)),this.connect({key:r}));try{(n?.useTransaction??l.DefaultOptions.useTransaction)&&(i=await this.connectionPool[r].sequelize.transaction()),this.connectionPool[r].transaction=s?null:i;const c=this.declareTables(this.connectionPool[r].sequelize,i,n.tables,n.relation);return e.db=new Proxy({},{get(e,t,n){return"sequelize"===t?o.connectionPool[r].sequelize:"transaction"===t?o.connectionPool[r].transaction:"tables"===t?c:Reflect.get(e,t,n)}}),{connectionKey:r,transaction:i}}catch(e){throw this.distroyConnect(r),e}}async onCallAfter(e,t,n,o){var r=o.connectionKey,n=(this.options?.useAlwaysConnection??l.DefaultOptions.useAlwaysConnection,n?.useTransaction??!1);n&&await o?.transaction?.commit(),this.distroyConnect(r)}async onCallError(e,t,n,o,r,i){console.error(i.original);i=this.options?.useAlwaysConnection??l.DefaultOptions.useAlwaysConnection;if((n?.useTransaction??!1)&&await o?.transaction?.rollback(),!i)try{o?.connectionKey&&await this.connectionPool[o?.connectionKey].sequelize.close()}catch(e){}this.distroyConnect(o?.connectionKey)}declareTables(o,n,e,t){const r={freezeTableName:!0,timestamps:!1},i=n=>(e,t)=>o.define(n,e,{...r,...t||{}}),a=e=>{let t=null,n=null;try{n=this.options.tablesStructure[e](i(e),{s:o,t:e,o:r})}catch(t){try{n=this.options.tablesStructure[e]({s:o,t:e,o:r})}catch(e){throw[t,e]}}return t=n instanceof Array?i(e)(n[0],n[1]):n};let s={};if(e&&0<e.length)e.forEach(e=>{var t=a(e);s[e]=n?u(t,n):d(t)}),t&&t(s);else{for(const l in this.options.tablesStructure){var c=a(l);s[l]=n?u(c,n):c}this.options?.relation&&this.options.relation(s)}return s}},l.modelPropsInject=n,l.injectTransaction=a,l.useTransaction=u,l.useDefaultModel=d;l.baseTransfor=(e,t)=>{var n={max:5,min:0,acquire:3e4,idle:1e4},t=t.DB_DRIVER;return"sqlite"===t?[{dialect:"sqlite",storage:e.path,pool:e.pool||n}]:"mysql"===t?[e.database,e.username,e.password,{host:e.host,port:e.port,dialect:"mysql",pool:e.pool||n}]:"postgres"===t?[e.database,e.username,e.password,{host:e.host,port:e.port,dialect:"postgres",pool:e.pool||n}]:[]}}(sequelize_loader),{});Object.defineProperty(sequelize_binder,"__esModule",{value:!0}),sequelize_binder.defineTables=void 0;const baseDefined_1=baseDefined,sequelize_loader_1=sequelize_loader;function defineTables(e,t,n){const o=new baseDefined_1.DefineDatabase(sequelize_loader_1.OrmLoader,{tablesStructure:e,relation:t,...n||{}});return{connect:o.connect.bind(o),Database:o.database}}sequelize_binder.defineTables=defineTables,function(e){var o=commonjsGlobal&&commonjsGlobal.__createBinding||(Object.create?function(e,t,n,o){void 0===o&&(o=n);var r=Object.getOwnPropertyDescriptor(t,n);r&&("get"in r?t.__esModule:!r.writable&&!r.configurable)||(r={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,o,r)}:function(e,t,n,o){e[o=void 0===o?n:o]=t[n]}),t=commonjsGlobal&&commonjsGlobal.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||o(t,e,n)};Object.defineProperty(e,"__esModule",{value:!0}),t(type,e),t(binder,e),t(injector,e),t(builder,e),t(factory,e),t(restful,e),t(configurator,e),t(baseDefined,e),t(sequelize_loader,e),t(sequelize_binder,e)}(lib);var index=getDefaultExportFromCjs(lib);export{index as default};
